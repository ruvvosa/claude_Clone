name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Get PR files
        id: pr-files
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });            
            const changedFiles = files.filter(file => 
              file.filename.endsWith('.go')
            );            
            const fileList = changedFiles.map(f => f.filename);
            console.log('Changed Go files:', fileList);            
            core.setOutput('files', fileList.join(' '));
            return fileList.length;

      - name: Setup Python
        uses: actions/setup-python@v5
        if: steps.pr-files.outputs.files != ''
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        if: steps.pr-files.outputs.files != ''
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run AI Code Review
        if: steps.pr-files.outputs.files != ''
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          files="${{ steps.pr-files.outputs.files }}"
          echo "Reviewing files: $files"
          python .github/scripts/ai-code-review.py $files >> $GITHUB_ENV

      - name: Add review to pull request
        if: env.REVIEW_CONTENT != '' && steps.pr-files.outputs.files != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reviewContent = Buffer.from(process.env.REVIEW_CONTENT, 'base64').toString('utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reviewContent
            });